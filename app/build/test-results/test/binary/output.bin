Q[ [116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103] ]
	[ atom ]
[ :- ]
[ ( ]
[ ) ]
[ % Facts ]
[ parent ( alice , bob ) . ]
[ parent ( bob , charlie ) . ]
![ parent ( charlie , diana ) . ]
4[ % Variables, Numbers, and Arithmetic Comparison ]
[ older ( bob , 40 ) . ]
+[ older ( charlie , X ) :- X is 20 * 2 . ]
[ % List and Operators ]
5[ likes ( alice , [ reading , music , travel ] ) . ]
4[ % Rule with conjunction (,) and disjunction (;) ]
G[ grandparent ( GP , GC ) :- parent ( GP , P ) , parent ( P , GC ) . ]
H[ sibling ( X , Y ) :- parent ( Z , X ) , parent ( Z , Y ) , X \= Y . ]
 [ % Using built-in predicates ]
-[ ancestor ( X , Y ) :- parent ( X , Y ) . ]
B[ ancestor ( X , Y ) :- parent ( X , Z ) , ancestor ( Z , Y ) . ]
[ % Query ]
"[ ?- ancestor ( alice , Who ) . ]
[ X is 5 + 2 . % X will be 7 ]
[ Y is 5 - 2 . % Y will be 3 ]
 [ Z is 5 * 2 . % Z will be 10 ]
 [ A is 10 / 2 . % A will be 5 ]
![ B is 10 // 3 . % B will be 3 ]
 [ C is 10 * 3 . % C will be 1 ]
 [ D is 2 ** 3 . % D will be 8 ]
[ X = Y . ]
[ X \= Y . ]
[ X < Y . ]
[ X > Y . ]
[ X =< < Y . ]
[ X >= Y . ]
[ X is Y . ]
[ X =\= Y . ]
7[ 5 \= 3 . % Succeeds because 5 and 3 are different. ]
6[ X \= 3 . % Succeeds if X is not unifiable with 3. ]
6[ 5 =\= 3 . % Succeeds because 5 is not equal to 3. ]
P[ X is 5 , X =\= 3 . % Succeeds because the value of X (5) is not equal to 3. ]
][ X ?= f ( X ) % The ?= operator in Prolog is known as the unify with occur check operator ]
[ parent ( alice , bob ) . ]
[ parent ( bob , charlie ) . ]
"[ ?- parent ( alice , Child ) . ]
[ asdfasdfsafd3333 ]
?[ [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33] ]
@[ % https://en.wikipedia.org/wiki/Prolog_syntax_and_semantics ]
c[ % A cut (!) inside a rule will prevent Prolog from backtracking any predicates behind the cut: ]
3[ predicate ( X ) :- one ( X ) , ! , two ( X ) . ]
e[ % Anonymous variables _ are never bound to a value and can be used multiple times in a predicate ]
![ contains ( V , [ V | _ ] ) . ]
7[ contains ( V , [ _ | T ] ) :- contains ( V , T ) . ]
”[ % The built-in Prolog predicate \+/1 provides negation as failure, which allows for non-monotonic reasoning. The goal \+ illegal(X) in the rule ]
&[ legal ( X ) :- \+ illegal ( X ) . ]
7[ % https://www.onlinegdb.com/online_prolog_compiler ]
[ main :- process , halt . ]
'[ process :- write ( Hello World ) . ]
[ :- main . ]
U[ % There exists special syntax for denoting lists: .(A, B) is equivalent to [A|B] ]
[ . ( A , B ) ]
I[ % written as [1 | [2 | [3 | []]]], or even more compactly as [1,2,3] ]
&[ . ( 1 , . ( 2 , . ( 3 , [ ] ) ) ) ]
[ % from chatgpt ]
[ parent ( alice , bob ) . ]
[ parent ( bob , charlie ) . ]
![ parent ( charlie , diana ) . ]
C[ grandparent ( X , Y ) :- parent ( X , Z ) , parent ( Z , Y ) . ]
H[ sibling ( X , Y ) :- parent ( Z , X ) , parent ( Z , Y ) , X \= Y . ]
[ female ( alice ) . ]
[ male ( bob ) . ]
#[ happy ( X ) :- wealthy ( X ) . ]
[ wealthy ( charlie ) . ]
 [ likes ( alice , reading ) . ]
[ likes ( bob , football ) . ]
[ friend ( alice , bob ) . ]
[ friend ( bob , charlie ) . ]
[ married ( alice , bob ) . ]
"[ married ( charlie , diana ) . ]
)[ likes ( X , music ) :- happy ( X ) . ]
-[ ancestor ( X , Y ) :- parent ( X , Y ) . ]
B[ ancestor ( X , Y ) :- parent ( X , Z ) , ancestor ( Z , Y ) . ]
[ older ( bob , 40 ) . ]
[ older ( charlie , 30 ) . ]
[ older ( diana , 25 ) . ]
Q[ older ( X , Y ) :- born ( X , YearX ) , born ( Y , YearY ) , YearX < YearY . ]
[ born ( alice , 1970 ) . ]
[ born ( bob , 1990 ) . ]
[ born ( charlie , 2010 ) . ]
[ born ( diana , 2015 ) . ]
A[ happy ( X ) :- likes ( X , music ) , likes ( X , reading ) . ]
[ animal ( dog ) . ]
[ animal ( cat ) . ]
[ can _ fly ( bird ) . ]
[ can _ fly ( airplane ) . ]
[ can _ swim ( fish ) . ]
[ can _ swim ( duck ) . ]
[ color ( sky , blue ) . ]
[ color ( grass , green ) . ]
[ color ( sun , yellow ) . ]
[ color ( apple , red ) . ]
 [ color ( banana , yellow ) . ]
 [ color ( orange , orange ) . ]
[ shape ( circle ) . ]
[ shape ( square ) . ]
[ shape ( triangle ) . ]
[ shape ( rectangle ) . ]
[ number ( 1 ) . ]
[ number ( 2 ) . ]
[ number ( 3 ) . ]
[ number ( 4 ) . ]
[ number ( 5 ) . ]
[ number ( 0 ) . ]
[ number ( 11112222 ) . ]
 [ number ( 11112222333333 ) . ]
7[ odd _ number ( X ) :- number ( X ) , X * 2 =:= 1 . ]
8[ even _ number ( X ) :- number ( X ) , X * 2 =:= 0 . ]
