<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="LexerTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2023-11-28T21:40:48" hostname="Lorenzs-MacBook-Pro-2019.local" time="0.043">
  <properties/>
  <testcase name="test()" classname="LexerTest" time="0.043"/>
  <system-out><![CDATA[[ [116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103] ]
[ atom ]
[ :- ]
[ ( ]
[ ) ]
[ % Facts ]
[ parent ( alice , bob ) . ]
[ parent ( bob , charlie ) . ]
[ parent ( charlie , diana ) . ]
[ % Variables, Numbers, and Arithmetic Comparison ]
[ older ( bob , 440 ) . ]
[ older ( charlie , X ) :- X is 220 * 22 . ]
[ % List and Operators ]
[ likes ( alice , [ reading , music , travel ] ) . ]
[ % Rule with conjunction (,) and disjunction (;) ]
[ grandparent ( GP , GC ) :- parent ( GP , P ) , parent ( P , GC ) . ]
[ sibling ( X , Y ) :- parent ( Z , X ) , parent ( Z , Y ) , X \= Y . ]
[ % Using built-in predicates ]
[ ancestor ( X , Y ) :- parent ( X , Y ) . ]
[ ancestor ( X , Y ) :- parent ( X , Z ) , ancestor ( Z , Y ) . ]
[ % Query ]
[ ?- ancestor ( alice , Who ) . ]
[ X is 55 + 22 . % X will be 7 ]
[ Y is 55 - 22 . % Y will be 3 ]
[ Z is 55 * 22 . % Z will be 10 ]
[ A is 110 / 22 . % A will be 5 ]
[ B is 110 // 33 . % B will be 3 ]
[ C is 110 * 33 . % C will be 1 ]
[ D is 22 ** 33 . % D will be 8 ]
[ X = Y . ]
[ X \= Y . ]
[ X < Y . ]
[ X > Y . ]
[ X =< < Y . ]
[ X >= Y . ]
[ X is Y . ]
[ X =\= Y . ]
[ 55 \= 33 . % Succeeds because 5 and 3 are different. ]
[ X \= 33 . % Succeeds if X is not unifiable with 3. ]
[ 55 =\= 33 . % Succeeds because 5 is not equal to 3. ]
[ X is 55 , X =\= 33 . % Succeeds because the value of X (5) is not equal to 3. ]
[ X ?= f ( X ) % The ?= operator in Prolog is known as the unify with occur check operator ]
[ parent ( alice , bob ) . ]
[ parent ( bob , charlie ) . ]
[ ?- parent ( alice , Child ) . ]
[ asdfasdfsafd3333 ]
[ [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33] ]
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
