(* A Prolog program is a series of clauses *)
program = { clause, "." } ;

(* A clause can be a fact, a rule, or a query *)
    rem    clause = fact | rule | query ;
clause = fact | rule | query

(* A fact is an atomic proposition *)
fact = predicate ;

(* A rule has a head and a body *)
rule = predicate, ":-", body ;

(* The body of a rule is a series of goals *)
body = expression ;
expression = term | condition | expression, logical_operator, expression ;

(* A condition can include comparison operators *)
condition = term, comparison_operator, term ;

(* Logical operators *)
logical_operator = "," | ";" ;

(* Comparison operators *)
comparison_operator = "=" | "\\=" | "<" | ">" | "=<" | ">=" ;

term = argument;

(* A goal is a predicate, possibly with arguments *)
goal = predicate ;

(* A predicate is an atom, possibly followed by a list of arguments *)
predicate = atom, [ "(", argument, { ",", argument }, ")" ] ;



   rem     (* Arguments can be atoms, variables, numbers, or compound terms *)
   rem     argument = atom | variable | number | compound_term ;
(* Arguments can be atoms, variables, numbers, or compound terms *)
argument = atom | variable | number | compound_term ;

(* A compound term is a functor followed by a list of arguments *)
compound_term = functor, "(", argument, { ",", argument }, ")" ;

   rem     (* A functor is an atom *)
   rem     functor = atom ;

(* Atoms, variables, and numbers are tokens *)
atom = "an atom" ;  (* Simplified representation *)
variable = "a variable" ;
number = "a number" ;

(* A query is represented by a goal *)
query = goal ;
