"this is a string"
atom
:-
(
)
% Facts
parent(alice, bob).
parent(bob, charlie).
parent(charlie, diana).

% Variables, Numbers, and Arithmetic Comparison
older(bob, 40).
older(charlie, X) :- X is 20 * 2.

% List and Operators
likes(alice, [reading, music, travel]).

% Rule with conjunction (,) and disjunction (;)
grandparent(GP, GC) :- parent(GP, P), parent(P, GC).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

% Using built-in predicates
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).

% Query
?- ancestor(alice, Who).

X is 5 + 2.  % X will be 7
Y is 5 - 2.  % Y will be 3
Z is 5 * 2.  % Z will be 10
A is 10 / 2.  % A will be 5
B is 10 // 3.  % B will be 3
C is 10 mod 3.  % C will be 1
D is 2 ** 3.  % D will be 8

X = Y.
X \= Y.
X < Y.
X > Y.
X =< Y.
X >= Y.
X is Y.
X =\= Y.

5 \= 3.   % Succeeds because 5 and 3 are different.
X \= 3.   % Succeeds if X is not unifiable with 3.
5 =\= 3.   % Succeeds because 5 is not equal to 3.
X is 5, X =\= 3.  % Succeeds because the value of X (5) is not equal to 3.

X ?= f(X) % The ?= operator in Prolog is known as the unify with occur check operator

parent(alice, bob).
parent(bob, charlie).
?- parent(alice, Child).

'asdfasdfsafd3333'
"hello world!"

% https://en.wikipedia.org/wiki/Prolog_syntax_and_semantics

% A cut (!) inside a rule will prevent Prolog from backtracking any predicates behind the cut:
predicate(X) :- one(X), !, two(X).

% Anonymous variables _ are never bound to a value and can be used multiple times in a predicate
contains(V, [V|_]).
contains(V, [_|T]) :- contains(V, T).

% The built-in Prolog predicate \+/1 provides negation as failure, which allows for non-monotonic reasoning. The goal \+ illegal(X) in the rule
legal(X) :- \+ illegal(X).


% https://www.onlinegdb.com/online_prolog_compiler
main:-process,halt.
process:-write('Hello World').
:- main.

% There exists special syntax for denoting lists: .(A, B) is equivalent to [A|B]
.(A, B)

% written as [1 | [2 | [3 | []]]], or even more compactly as [1,2,3]
.(1, .(2, .(3, [])))


% from chatgpt

parent(alice, bob).
parent(bob, charlie).
parent(charlie, diana).
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
female(alice).
male(bob).
happy(X) :- wealthy(X).
wealthy(charlie).
likes(alice, reading).
likes(bob, football).
friend(alice, bob).
friend(bob, charlie).
married(alice, bob).
married(charlie, diana).
likes(X, music) :- happy(X).
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).
older(bob, 40).
older(charlie, 30).
older(diana, 25).
older(X, Y) :- born(X, YearX), born(Y, YearY), YearX < YearY.
born(alice, 1970).
born(bob, 1990).
born(charlie, 2010).
born(diana, 2015).
happy(X) :- likes(X, music), likes(X, reading).
animal(dog).
animal(cat).
can_fly(bird).
can_fly(airplane).
can_swim(fish).
can_swim(duck).
color(sky, blue).
color(grass, green).
color(sun, yellow).
color(apple, red).
color(banana, yellow).
color(orange, orange).
shape(circle).
shape(square).
shape(triangle).
shape(rectangle).
number(1).
number(2).
number(3).
number(4).
number(5).
number(00).
number(0011112222).
number(0011112222333333).
odd_number(X) :- number(X), X mod 2 =:= 1.
even_number(X) :- number(X), X mod 2 =:= 0.


% more complex

member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
append([], L, L).
append([H|T], L, [H|R]) :- append(T, L, R).
reverse([], []).
reverse([H|T], R) :- reverse(T, RevT), append(RevT, [H], R).
findall(X, member(X, [1,2,3,4,5]), L).
maplist(plus(1), [1, 2, 3], [2, 3, 4]).
subtract([1,2,3,4,5], [2,4], L).
select(3, [1,2,3,4], R).
permutation([1,2,3], P).
nth0(2, [a,b,c,d], X).
zip([1,2,3], [a,b,c], Z).
foldl(plus, [1,2,3,4,5], 0, Sum).
sort([3,1,4,1,5], S).
length(L, 5), maplist(=(0), L).

% dont understand. wait
%setof(X, Y^(member(Y, [1,2,3]), X is Y*Y), S).

bagof(X, member(X, [a,b,c,a]), L).
once((member(X, [a,b,c]), X = b)).
forall(member(X, [1,2,3]), X < 4).
phrase("hello world").
atomic_list_concat(['Pro', 'log'], X).
dif(X, Y), X = 1, Y = 2.
X is max(3, 7).
numlist(1, 10, L).
flatten([1, [2, [3, 4]], 5], F).
nth1(3, [a,b,c,d], X).
partition(>(3), [1,2,3,4,5], L, G).
include(>(3), [1,2,3,4,5], G).
exclude(>(3), [1,2,3,4,5], L).
sumlist([1,2,3,4,5], Sum).
msort([3,1,4,1,5], S).
keysort([1-a,3-c,2-b], K).
group_by(length, [hello, world, hi, prolog], L, G).
clique([a-b, b-c, c-d], C).
acyclic_graph([a-b, b-c, c-a]).
transitive_closure([a-b, b-c], TC).
path(a, [a-b, b-c], c).
sublist([2,3], [1,2,3,4]).
prefix([1,2], [1,2,3,4]).
suffix([3,4], [1,2,3,4]).
sub_atom('hello', 1, 3, _, Sub).
string_to_list('hello', L).
string_concat('Hel', 'lo', 'Hello').
string_length('hello', Len).
sub_string('hello', 1, 3, _, Sub).
downcase_atom('Hello', Lower).
upcase_atom('hello', Upper).
atom_number('123', N).
number_chars(123, Chars).
